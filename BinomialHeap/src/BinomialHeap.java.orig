import java.util.ArrayList;
import java.util.List;

/**
 * BinomialHeap
 *
 * An implementation of binomial heap over non-negative integers. Based on
 * exercise from previous semester.
 */
public class BinomialHeap
{
	private HeapNode[] trees;
	private boolean isEmpty;

<<<<<<< HEAD
=======
	public BinomialHeap()
	{
		this.trees = new HeapNode[1024];
		this.isEmpty = true;
	}

>>>>>>> dudel
	/**
	 * public boolean empty()
	 *
	 * precondition: none
	 * 
<<<<<<< HEAD
	 * The method returns true if and only if the heap
	 * is empty.
=======
	 * The method returns true if and only if the heap is empty.
>>>>>>> dudel
	 * 
	 */
	public boolean empty()
	{
<<<<<<< HEAD
		return false; // should be replaced by student code
=======
		return isEmpty;
>>>>>>> dudel
	}

	/**
	 * public void insert(int value)
	 *
	 * Insert value into the heap
	 *
	 */
	public void insert(int value)
	{
		return; // should be replaced by student code
	}

	/**
	 * public void deleteMin()
	 *
	 * Delete the minimum value
	 *
	 */
	public void deleteMin()
	{
		return; // should be replaced by student code

	}

	/**
	 * public int findMin()
	 *
	 * Return the minimum value
	 *
	 */
	public int findMin()
	{
		return 42;// should be replaced by student code
	}

	/**
	 * public void meld (BinomialHeap heap2)
	 *
	 * Meld the heap with heap2
	 *
	 */
	public void meld(BinomialHeap heap2)
	{
		return; // should be replaced by student code
	}

	/**
	 * public int size()
	 *
	 * Return the number of elements in the heap
	 * 
	 */
	public int size()
	{
		return 42; // should be replaced by student code
	}

	/**
	 * public int minTreeRank()
	 *
	 * Return the minimum rank of a tree in the heap.
	 * 
	 */
	public int minTreeRank()
	{
		return 0; // to be replaced by student code
	}

	/**
	 * public boolean[] binaryRep()
	 *
	 * Return an array containing the binary representation of the heap.
	 * 
	 */
	public boolean[] binaryRep()
	{
		boolean[] arr = new boolean[42];
		return arr; // to be replaced by student code
	}

	/**
	 * public void arrayToHeap()
	 *
	 * Insert the array to the heap. Delete previous elemnts in the heap.
	 * 
	 */
	public void arrayToHeap(int[] array)
	{
		return; // to be replaced by student code
	}

	/**
	 * public boolean isValid()
	 *
	 * Returns true if and only if the heap is valid.
	 * 
	 */
	public boolean isValid()
	{
		return false; // should be replaced by student code
	}
<<<<<<< HEAD

	/**
	 * public class HeapNode
	 * 
	 * If you wish to implement classes other than BinomialHeap
	 * (for example HeapNode), do it in this file, not in
	 * another file
	 * 
	 */
	public class HeapNode
	{
		private int key;
		private String val;
		private HeapNode parent;
		private List<HeapNode> children;

		public HeapNode(int key, String val, HeapNode parent, List<HeapNode> children)
		{
			this.key = key;
			this.val = val;
			this.parent = parent;
			if (children == null)
				children = new ArrayList<BinomialHeap.HeapNode>();
			else
				this.children = children;
		}

		public int getKey()
		{
			return key;
		}

		public void setKey(int key)
		{
			this.key = key;
		}

		public String getVal()
		{
			return val;
		}

		public void setVal(String val)
		{
			this.val = val;
		}

		public HeapNode getParent()
		{
			return parent;
		}

		public void setParent(HeapNode parent)
		{
			this.parent = parent;
		}

		public List<HeapNode> getChildren()
		{
			return children;
		}

		public void setChildren(List<HeapNode> children)
		{
			this.children = children;
		}
=======

	/**
	 * public class HeapNode
	 * 
	 * If you wish to implement classes other than BinomialHeap (for example
	 * HeapNode), do it in this file, not in another file
	 * 
	 */
	public class HeapNode
	{

	}

	public void doubling()
	{// TODO complete
>>>>>>> dudel

	}

}
